<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[linux概念相关基础]]></title>
    <url>%2FLinux%2Flinux%E6%A6%82%E5%BF%B5%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[Linux基础概念挂载、基础目录、文件类型 挂载挂载利用目录作为文件系统的进入点，也就是说，进入目录之后就可以读取文件系统的数据。 最基础的三个目录/(root,根目录)/usr(unix software resource):所有系统默认软件都会安装到这个目录；/var(variable):存放系统或程序运行过程中的数据文件。 常见文件类型d:目录-:文件l:链接文件 文件的三种时间modification time(mtime):文件的内容更新就会更新；status time(ctime):文件的状态（权限，属性）更新就会更新；access time(atime):读取文件时就会更新 文件与目录的基本操作 ls [选项] 文件/目录列出文件或者目录信息-a:列出全部文件-d:仅列出目录本身-l:以长数据串行列出，包含文件的属性与权限等数据 mkdir [选项] 目录名称创建目录-m:设置目录权限-p:递归创建目录 rmdir [选项] 目录名称删除目录，目录必须为空-p:递归删除目录 touch [选项] cp [选项] rm [选项] mv [选项]]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker常用命令]]></title>
    <url>%2FDocker%2FDocker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Docker常用命令详解获取镜像docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt; Docker Registry地址格式：&lt;域名/ip&gt;[:端口号]默认为DockerHub地址 仓库名两段式名称，&lt;用户名&gt;/&lt;软件名&gt;若不给出用户名，默认为library，即为官方镜像 镜像分层镜像是进行分层存储的，下载的是也是一层层下载的，而不是单一文件。下载时，会给出每一层ID的前12位。下载结束后，给出镜像完整的sha256的摘要，确保下载的一致性。 运行镜像docker run [选项] &lt;仓库名&gt;:&lt;标签&gt;相当于是新建了一个容器并启动 示例docker run -it –rm ununtu:14.04 bash-i 交互式操作-t 终端–rm 容器退出后将其删除 bash 使用容器的bash执行交互式shell命令 列出所有镜像docker images 列出的信息仓库名 标签：一个镜像可以对应多个标签 镜像ID：镜像的唯一标识 创建时间 所占用空间：镜像下载到本地之后，展开后各层所占空间的总和。 根据仓库名列出镜像 docker images &lt;仓库名&gt; 列出指定镜像 docker images &lt;仓库名&gt;:&lt;标签&gt; 过滤参数 如：docker images -f since=mongo:3.2，即列出mongo:3.2之后建立的镜像 容器操作 启动容器 新建并启动 启动已终止的容器 后台运行容器 终止容器 进入容器 nsenter命令 导出容器 导入容器快照 删除容器 清理所有处于终止状态的容器]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker基本概念]]></title>
    <url>%2FDocker%2FDocker%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[Docker的三个基本概念镜像 镜像是一个只读的模板,可以用来创建容器 镜像可以是一个包含完成操作系统的环境，里面仅仅安装了用户需要的软件 容器 容器是从镜像创建的运行实例，可以被启动、开始、停止、删除，每个容器都是相互隔离的。 可以把容器看作是一个简易版的Linux环境和运行在其中的应用程序。 仓库 仓库是集中存放镜像文件的场所，每个仓库可以包含多个镜像，每个镜像可以有不同的标签（tag）。 仓库分为公用仓库和私有仓库，用户可以在本地网络创建私有仓库。]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7 安装docker]]></title>
    <url>%2FDocker%2FCentOS7-%E5%AE%89%E8%A3%85docker%2F</url>
    <content type="text"><![CDATA[CentOS更换国内yum源 进入yum源配置目录cd /etc/yum.repos.d 备份系统自带的yum源mv CentOS-Base.repo CentOS-Base.repo.bk 下载163网易的yum源wget http://mirrors.163.com/.help/CentOS7-Base-163.repo 更新玩yum源后，执行下边命令更新yum配置，使操作立即生效yum makecache Docker安装 执行安装命令sudo yum -y install docker 启动docker服务sudo service docker start 设置开机启动sudo chkconfig docker on 设置docker加速器国内访问dockerhub有时候会比较慢，此时可以使用如下命令设置使用daocloud加速器curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://15962670.m.daocloud.io]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git上传本地项目、拉取项目到本地及提交]]></title>
    <url>%2FGit%2FGit%E4%BD%BF%E7%94%A8%2Fgit%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E3%80%81%E6%8B%89%E5%8F%96%E9%A1%B9%E7%9B%AE%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%8F%8A%E6%8F%90%E4%BA%A4%2F</url>
    <content type="text"><![CDATA[上传本地项目到git仓库 第一步：初始化本地项目目录cd到本地项目的根目录，执行git init，此时会在当前目录生成.git文件 第二步：将项目文件添加到待上传列表执行命令git add .这个命令会把当前路径下的所有文件，添加到待上传的文件列表中。 如果想添加某个特定的文件，只需把.换成特定的文件名即可。 第三步：将add的文件commit到仓库执行命令git commit -m &quot;注释语句&quot; 第四步：将本地的仓库关联到github执行命令git remote add origin https://仓库url 第五步：上传代码到github远程仓库执行命令git push -u origin master，执行时会提示输入账号和密码若执行时时出现错误[rejected] master -&gt; master (non-fast-forward)，则先执行语句git pull，在执行git push --force origin master即可解决。 拉取git项目到本地 第一步： cd 到需要存放项目的目录执行命令cd 目录 第二步： 克隆项目执行命令git clone url 改动后提交项目到github 第一步：git add 修改后的文件，若全部提交，则执行git add . 第二步：执行git commit -m &quot;注释&quot; 第三步：执行git push origin master 修改上传的用户名和密码12git config --global user.name &quot;Your Name&quot;git config --global user.email you@example.com 或者通过更改配置文件的方式进行修改全局的通过vim ~/.gitconfig来修改局部的通过当前路径下的 .git/config文件来修改]]></content>
      <categories>
        <category>Git</category>
        <category>Git使用</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拷贝Docker镜像]]></title>
    <url>%2FDocker%2FDocker%E6%8A%80%E5%B7%A7%2F%E6%8B%B7%E8%B4%9DDocker%E9%95%9C%E5%83%8F%2F</url>
    <content type="text"><![CDATA[什么时候需要拷贝镜像？例如，内部网络无法通过互联网下载镜像，可以在已经安装的机器上将镜像拷贝到内部环境进行安装。 拷贝镜像的步骤（以Ubuntu系统为例） 在源机器上保存镜像到当前目录sudo docker save -o ./mysql.tar mysql:5.7 拷贝tar包到需要装载镜像的机器 执行load命令sudo docker load &lt; mysql.tar 检查镜像是否已装载sudo docker images 运行镜像sudo docker run -p 3306:3306 -v $PWD/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=password –name mysql57 -d mysql:5.7]]></content>
      <categories>
        <category>Docker</category>
        <category>Docker技巧</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
</search>
