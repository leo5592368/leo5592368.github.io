{"meta":{"title":"Wanggq's Blog","subtitle":null,"description":null,"author":"wanggq","url":"https://wanggq.xyz","root":"/"},"pages":[{"title":"","date":"2017-09-06T07:37:18.000Z","updated":"2019-04-27T08:44:41.916Z","comments":false,"path":"/404.html","permalink":"https://wanggq.xyz//404.html","excerpt":"","text":""},{"title":"目录","date":"2019-04-27T08:39:04.000Z","updated":"2019-04-27T08:42:28.168Z","comments":true,"path":"catalogues/index.html","permalink":"https://wanggq.xyz/catalogues/index.html","excerpt":"","text":""},{"title":"schedule","date":"2018-07-23T15:02:44.000Z","updated":"2018-07-23T15:04:16.645Z","comments":true,"path":"schedule/index.html","permalink":"https://wanggq.xyz/schedule/index.html","excerpt":"","text":""},{"title":"分类","date":"2014-12-22T04:39:04.000Z","updated":"2019-04-27T07:03:13.013Z","comments":true,"path":"categories/index.html","permalink":"https://wanggq.xyz/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-04-27T07:15:40.000Z","updated":"2019-04-27T07:17:04.490Z","comments":true,"path":"tags/index.html","permalink":"https://wanggq.xyz/tags/index.html","excerpt":"","text":""},{"title":"博主信息","date":"2018-07-21T16:59:04.000Z","updated":"2018-07-26T11:53:59.639Z","comments":true,"path":"about/index.html","permalink":"https://wanggq.xyz/about/index.html","excerpt":"","text":"BlogName: Leo’s BlogEmalil: 5592368@qq.com"}],"posts":[{"title":"从零单排设计模式——代理模式","slug":"从零单排设计模式——代理模式","date":"2019-05-26T08:51:17.000Z","updated":"2019-05-26T08:52:26.234Z","comments":true,"path":"从零单排设计模式/从零单排设计模式——代理模式/","link":"","permalink":"https://wanggq.xyz/从零单排设计模式/从零单排设计模式——代理模式/","excerpt":"","text":"代理模式为其他对象提供一种代理以控制对这个对象的访问 UML类图 代理模式三剑客：共同接口、真实对象、代理对象 代理模式分为静态代理和动态代理： 静态代理 在编译期实现代理对象 动态代理 在运行时生成代理对象 代理的作用 远程代理 为一个对象在不同的地址空间提供局部代表，以隐藏一个对象存在于不同地址空间的事实。 虚拟代理 根据需要创建开销很大的对象，通过它来存放实例化需要很长时间的真实对象。 安全代理 用来控制真实对象访问时的权限。 智能指引 当调用真实的对象时，代理处理另外一些事。 如何实现代理在接口IHelloWorld`中有方法sayHello()，HelloWorldImpl`实现了该接口，代码如下： 123public interface IHelloWorld &#123; void sayHello();&#125; 123456public class HelloWorldImpl implements IHelloWorld &#123; @Override public void sayHello() &#123; System.out.println(\"Hello World\"); &#125;&#125; 通过代理的方式在调用sayHello方法之前输出beffore sayHello，在调用方法结束后输出after sayHello。 静态代理123456789101112131415161718192021import com.leo.proxy.HelloWorldImpl;import com.leo.proxy.IHelloWorld;public class HelloWorldProxy implements IHelloWorld &#123; private IHelloWorld helloWorld; public HelloWorldProxy(IHelloWorld helloWorld)&#123; this.helloWorld = helloWorld; &#125; @Override public void sayHello() &#123; System.out.println(\"before sayHello\"); helloWorld.sayHello(); System.out.println(\"after sayHello\"); &#125; public static void main(String[] args) &#123; HelloWorldProxy proxy = new HelloWorldProxy(new HelloWorldImpl()); proxy.sayHello(); &#125;&#125; 动态代理Jdk动态代理1234567891011121314151617181920212223242526272829303132import com.leo.proxy.HelloWorldImpl;import com.leo.proxy.IHelloWorld;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;public class JdkDynamicProxy implements InvocationHandler &#123; private Object target; public JdkDynamicProxy(Object target)&#123; this.target = target; &#125; public &lt;T&gt; T getProxy()&#123; return (T) Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this); &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; System.out.println(\"besfore sayHello\"); Object result = method.invoke(target, args); System.out.println(\"after sayHello\"); return result; &#125; public static void main(String[] args) &#123; IHelloWorld helloWorld = new JdkDynamicProxy(new HelloWorldImpl()).getProxy(); helloWorld.sayHello(); &#125;&#125; cglib动态代理1234567891011121314151617181920212223242526import com.leo.proxy.HelloWorldImpl;import com.leo.proxy.IHelloWorld;import net.sf.cglib.proxy.Enhancer;import net.sf.cglib.proxy.MethodInterceptor;import net.sf.cglib.proxy.MethodProxy;import java.lang.reflect.Method;public class CglibDynamicProxy implements MethodInterceptor &#123; @Override public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123; System.out.println(\"before sayHello\"); Object result = methodProxy.invokeSuper(o, objects); System.out.println(\"after sayHello\"); return result; &#125; public static void main(String[] args) &#123; Enhancer enhancer = new Enhancer(); enhancer.setSuperclass(HelloWorldImpl.class); enhancer.setCallback(new CglibDynamicProxy()); IHelloWorld proxy = (IHelloWorld)enhancer.create(); proxy.sayHello(); &#125;&#125; 使用Apache的commons-proxy包实现Jdk动态代理与Cglib代理的区别 动态代理只能够对接口进行代理，不能对普通的类进行代理（因为所有生成的代理类的父类为Proxy，Java类继承机制不允许多重继承）；CGLIB能够代理普通类。 Java动态代理使用Java原生的反射API进行操作，在生成类上比较高效；CGLIB使用ASM框架直接对字节码进行操作，在类的执行过程中比较高效。","categories":[{"name":"从零单排设计模式","slug":"从零单排设计模式","permalink":"https://wanggq.xyz/categories/从零单排设计模式/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"https://wanggq.xyz/tags/设计模式/"}]},{"title":"从零单排学Java——Java数据类型","slug":"从零单排学Java——Java数据类型","date":"2019-05-26T08:44:45.000Z","updated":"2019-05-26T08:57:19.344Z","comments":true,"path":"从零单排学Java/Java基础/从零单排学Java——Java数据类型/","link":"","permalink":"https://wanggq.xyz/从零单排学Java/Java基础/从零单排学Java——Java数据类型/","excerpt":"","text":"数据类型Java中的数据类型分为基础数据类型和引用数据类型。 基础数据类型整型 byte 8位，用于表示最小的数据单位，-128~127 short 16位，一般很少用，-32768~32767 int 32位，最常用，-231~231 int i = 2，2叫字面量(直接量)，即直接写出的常数，整数的字面量默认都是int类型。 Java7开始，int类型可以使用下划线，方便编码人员阅读，如：int a = 1_000 long 64位，次常用，在定义long型数据时，在后面加上L或l。 浮点型浮点数，顾名思义是浮动的数，即是不精确的数，不能对浮点数进行精确比较。在计算过程中也会损失精度，因此切勿使用在需要明确数字精度的场景，如表示金额等。 float 32位，定义时，在后面加上F或者f。 double 64位，是浮点型的默认字面量类型，定义时无需加后缀。 字符型尽量不要使用，容易产生隐藏的错误。 char 16位，单引号表示(可以是中文字符，Unicode编码)，实际是整数类型，经过处理显示为字符，0~216-1 布尔型 boolean 表示真（true）假（false） 引用数据类型引用数据类型的存储空间氛围两部分，一个在stack(栈)中，一个在heap(堆)中。一般stack中存放head的地址，heap中存放实际的数据。 数组类接口Java8开始，接口中的方法可以有默认实现。 1234567public interface IHelloWorld &#123; void sayHello(); default void sayBye()&#123; System.out.println(\"Bye\"); &#125;&#125; 区别基本数据类型 变量名指向具体的值 声明后，立刻分配给它内存空间 分配在栈上 使用==比较相等 引用数据类型 变量名指向存储对象的内存地址 声明后，分配的是内存地址，不会分配内存 实际数据分配在堆上 通常使用equals方法进行比较。如果使用==，仅仅是比较两个对象是否指向同一个内存地址。 包装类型基本类型出现的原因引用《Thinking In Java》中的相关描述。万物皆对象，new一个对象存储在堆中，我们通过堆栈的引用来使用这些对象，但是对于经常用到的一系列类型如int，如果我们用new将其存储在堆里就不是很有效——特别是简单的小的变量。所以就出现了基本类型，同C++一样，Java采用了相似的做法，对于这些类型不是用new关键字来创建，而是直接将变量的值存储在堆栈中，因此更加高效。 包装类型出现的原因Java是一个面向对象的语言，基本类型并不具有对象的性质，为了与其他对象“接轨”就出现了包装类型（如我们在使用集合类型Collection时就一定要使用包装类型而非基本类型），它相当于将基本类型“包装起来”，使得它具有了对象的性质，并且为其添加了属性和方法，丰富了基本类型的操作。 基本类型的包装类型 基本类型 二进制位数 包装类型 boolean 1 Boolean byte 8 Byte char 8 Char short 16 Short int 32 Integer long 64 Long float 32 Float double 64 Double 类型装换类型转换主要在赋值、方法调用、算术运算三种情况下发生。 基本类型转换原则 赋值和方法调用 从低位到高位，自动类型转换 布尔类型和其它基本数据类型之间不能相互转换 转换从低到高： byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double 从高位到低位，强制类型转换，会损失精度 算术运算 整体原则：不同类型之间的计算，先转换为高位数据类型，再参加运算，结果也是高位的数据类型。 引用类型转换原则 基本类型与对应的包装类型，自动转换 子类能直接转换为父类或者接口类型 父类转换为子类，强制类型转换 运行时，若实际不是对应的对象，会抛出ClassCastException运行时异常。","categories":[{"name":"从零单排学Java","slug":"从零单排学Java","permalink":"https://wanggq.xyz/categories/从零单排学Java/"},{"name":"Java基础","slug":"从零单排学Java/Java基础","permalink":"https://wanggq.xyz/categories/从零单排学Java/Java基础/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"https://wanggq.xyz/tags/Java基础/"}]},{"title":"linux概念相关基础","slug":"linux概念相关基础","date":"2018-09-11T14:09:32.000Z","updated":"2019-04-27T12:29:52.324Z","comments":true,"path":"Linux/linux概念相关基础/","link":"","permalink":"https://wanggq.xyz/Linux/linux概念相关基础/","excerpt":"","text":"Linux基础概念挂载、基础目录、文件类型 挂载挂载利用目录作为文件系统的进入点，也就是说，进入目录之后就可以读取文件系统的数据。 最基础的三个目录/(root,根目录)/usr(unix software resource):所有系统默认软件都会安装到这个目录；/var(variable):存放系统或程序运行过程中的数据文件。 常见文件类型d:目录-:文件l:链接文件 文件的三种时间modification time(mtime):文件的内容更新就会更新；status time(ctime):文件的状态（权限，属性）更新就会更新；access time(atime):读取文件时就会更新 文件与目录的基本操作 ls [选项] 文件/目录列出文件或者目录信息-a:列出全部文件-d:仅列出目录本身-l:以长数据串行列出，包含文件的属性与权限等数据 mkdir [选项] 目录名称创建目录-m:设置目录权限-p:递归创建目录 rmdir [选项] 目录名称删除目录，目录必须为空-p:递归删除目录 touch [选项] cp [选项] rm [选项] mv [选项]","categories":[{"name":"Linux","slug":"Linux","permalink":"https://wanggq.xyz/categories/Linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://wanggq.xyz/tags/Linux/"}]},{"title":"Docker常用命令","slug":"Docker常用命令","date":"2018-09-10T14:34:53.000Z","updated":"2019-04-27T12:29:16.422Z","comments":true,"path":"Docker/Docker常用命令/","link":"","permalink":"https://wanggq.xyz/Docker/Docker常用命令/","excerpt":"","text":"Docker常用命令详解获取镜像docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt; Docker Registry地址格式：&lt;域名/ip&gt;[:端口号]默认为DockerHub地址 仓库名两段式名称，&lt;用户名&gt;/&lt;软件名&gt;若不给出用户名，默认为library，即为官方镜像 镜像分层镜像是进行分层存储的，下载的是也是一层层下载的，而不是单一文件。下载时，会给出每一层ID的前12位。下载结束后，给出镜像完整的sha256的摘要，确保下载的一致性。 运行镜像docker run [选项] &lt;仓库名&gt;:&lt;标签&gt;相当于是新建了一个容器并启动 示例docker run -it –rm ununtu:14.04 bash-i 交互式操作-t 终端–rm 容器退出后将其删除 bash 使用容器的bash执行交互式shell命令 列出所有镜像docker images 列出的信息仓库名 标签：一个镜像可以对应多个标签 镜像ID：镜像的唯一标识 创建时间 所占用空间：镜像下载到本地之后，展开后各层所占空间的总和。 根据仓库名列出镜像 docker images &lt;仓库名&gt; 列出指定镜像 docker images &lt;仓库名&gt;:&lt;标签&gt; 过滤参数 如：docker images -f since=mongo:3.2，即列出mongo:3.2之后建立的镜像 容器操作 启动容器 新建并启动 启动已终止的容器 后台运行容器 终止容器 进入容器 nsenter命令 导出容器 导入容器快照 删除容器 清理所有处于终止状态的容器","categories":[{"name":"Docker","slug":"Docker","permalink":"https://wanggq.xyz/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://wanggq.xyz/tags/Docker/"}]},{"title":"Docker基本概念","slug":"Docker基本概念","date":"2018-09-09T14:40:54.000Z","updated":"2019-04-27T12:28:58.511Z","comments":true,"path":"Docker/Docker基本概念/","link":"","permalink":"https://wanggq.xyz/Docker/Docker基本概念/","excerpt":"","text":"Docker的三个基本概念镜像 镜像是一个只读的模板,可以用来创建容器 镜像可以是一个包含完成操作系统的环境，里面仅仅安装了用户需要的软件 容器 容器是从镜像创建的运行实例，可以被启动、开始、停止、删除，每个容器都是相互隔离的。 可以把容器看作是一个简易版的Linux环境和运行在其中的应用程序。 仓库 仓库是集中存放镜像文件的场所，每个仓库可以包含多个镜像，每个镜像可以有不同的标签（tag）。 仓库分为公用仓库和私有仓库，用户可以在本地网络创建私有仓库。","categories":[{"name":"Docker","slug":"Docker","permalink":"https://wanggq.xyz/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://wanggq.xyz/tags/Docker/"}]},{"title":"CentOS7 安装docker","slug":"CentOS7-安装docker","date":"2018-09-09T14:26:28.000Z","updated":"2019-04-27T12:28:33.271Z","comments":true,"path":"Docker/CentOS7-安装docker/","link":"","permalink":"https://wanggq.xyz/Docker/CentOS7-安装docker/","excerpt":"","text":"CentOS更换国内yum源 进入yum源配置目录cd /etc/yum.repos.d 备份系统自带的yum源mv CentOS-Base.repo CentOS-Base.repo.bk 下载163网易的yum源wget http://mirrors.163.com/.help/CentOS7-Base-163.repo 更新玩yum源后，执行下边命令更新yum配置，使操作立即生效yum makecache Docker安装 执行安装命令sudo yum -y install docker 启动docker服务sudo service docker start 设置开机启动sudo chkconfig docker on 设置docker加速器国内访问dockerhub有时候会比较慢，此时可以使用如下命令设置使用daocloud加速器curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://15962670.m.daocloud.io","categories":[{"name":"Docker","slug":"Docker","permalink":"https://wanggq.xyz/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://wanggq.xyz/tags/Docker/"}]},{"title":"git上传本地项目、拉取项目到本地及提交","slug":"git上传本地项目、拉取项目到本地及提交","date":"2018-07-25T14:44:30.000Z","updated":"2019-04-27T12:31:18.477Z","comments":true,"path":"Git/Git使用/git上传本地项目、拉取项目到本地及提交/","link":"","permalink":"https://wanggq.xyz/Git/Git使用/git上传本地项目、拉取项目到本地及提交/","excerpt":"","text":"上传本地项目到git仓库 第一步：初始化本地项目目录cd到本地项目的根目录，执行git init，此时会在当前目录生成.git文件 第二步：将项目文件添加到待上传列表执行命令git add .这个命令会把当前路径下的所有文件，添加到待上传的文件列表中。 如果想添加某个特定的文件，只需把.换成特定的文件名即可。 第三步：将add的文件commit到仓库执行命令git commit -m &quot;注释语句&quot; 第四步：将本地的仓库关联到github执行命令git remote add origin https://仓库url 第五步：上传代码到github远程仓库执行命令git push -u origin master，执行时会提示输入账号和密码若执行时时出现错误[rejected] master -&gt; master (non-fast-forward)，则先执行语句git pull，在执行git push --force origin master即可解决。 拉取git项目到本地 第一步： cd 到需要存放项目的目录执行命令cd 目录 第二步： 克隆项目执行命令git clone url 改动后提交项目到github 第一步：git add 修改后的文件，若全部提交，则执行git add . 第二步：执行git commit -m &quot;注释&quot; 第三步：执行git push origin master 修改上传的用户名和密码12git config --global user.name &quot;Your Name&quot;git config --global user.email you@example.com 或者通过更改配置文件的方式进行修改全局的通过vim ~/.gitconfig来修改局部的通过当前路径下的 .git/config文件来修改","categories":[{"name":"Git","slug":"Git","permalink":"https://wanggq.xyz/categories/Git/"},{"name":"Git使用","slug":"Git/Git使用","permalink":"https://wanggq.xyz/categories/Git/Git使用/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://wanggq.xyz/tags/Git/"}]},{"title":"拷贝Docker镜像","slug":"拷贝Docker镜像","date":"2018-07-23T14:17:59.000Z","updated":"2019-04-27T12:31:36.009Z","comments":true,"path":"Docker/Docker技巧/拷贝Docker镜像/","link":"","permalink":"https://wanggq.xyz/Docker/Docker技巧/拷贝Docker镜像/","excerpt":"","text":"什么时候需要拷贝镜像？例如，内部网络无法通过互联网下载镜像，可以在已经安装的机器上将镜像拷贝到内部环境进行安装。 拷贝镜像的步骤（以Ubuntu系统为例） 在源机器上保存镜像到当前目录sudo docker save -o ./mysql.tar mysql:5.7 拷贝tar包到需要装载镜像的机器 执行load命令sudo docker load &lt; mysql.tar 检查镜像是否已装载sudo docker images 运行镜像sudo docker run -p 3306:3306 -v $PWD/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=password –name mysql57 -d mysql:5.7","categories":[{"name":"Docker","slug":"Docker","permalink":"https://wanggq.xyz/categories/Docker/"},{"name":"Docker技巧","slug":"Docker/Docker技巧","permalink":"https://wanggq.xyz/categories/Docker/Docker技巧/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://wanggq.xyz/tags/Docker/"}]}]}